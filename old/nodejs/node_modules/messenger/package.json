{
  "name": "messenger",
  "description": "A json communication layer for node.js",
  "author": {
    "name": "Weixi Yen"
  },
  "version": "0.0.9",
  "main": "./lib/messenger.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/weixiyen/messenger.js.git"
  },
  "readme": "Messenger.js - Fast Node.js Communication Library\n============\nInstallation\n\n    npm install messenger\n\nWhat is Messenger.js?\n------------------\nMessenger.js is a library that makes network communication via JSON dead simple and insanely fast!\n\nExample:\n\n```javascript\nvar messenger = require('messenger');\n\nclient = messenger.createSpeaker(8000);\nserver = messenger.createListener(8000);\n\nserver.on('give it to me', function(message, data){\n  message.reply({'you':'got it'})\n});\n\nsetInterval(function(){\n  client.request('give it to me', {hello:'world'}, function(data){\n    console.log(data);\n  });\n}, 1000);\n```\n\nOutput:\n\n```javascript\n> {'you':'got it'}\n> {'you':'got it'}\n> ...etc...\n```\n\nFeatures\n--------\nMessenger.js is very flexible and can handle everything you need.\n\n- Supports Request / Reply Communication using round robin\n- Supports Publish / Subscribe (fanout) Communication\n- Supports Fire and Forget Communication\n- Supports middleware plugin for messenger Listeners (servers)\n- Extremely fast (disables TCP Nagle's algorithm)\n- Fault tolerant: clients will reconnect to servers even if server goes down and comes back later\n- Elegant API\n- Easily involves multiple servers\n- Zero dependencies on other libraries\n\nPub Sub Example - .shout\n-------------\n\nExample\n\n```javascript\nvar messenger = require('messenger');\n\n// here we have 4 servers listening on 4 different ports\nvar server1 = messenger.createListener(8001);\nvar server2 = messenger.createListener(8002);\nvar server3 = messenger.createListener(8003);\nvar server4 = messenger.createListener('127.0.0.1:8004');\n\nserver1.on('a message came', function(m, data){\n  // note that m.data and data are equivalent\n  console.log('server 1 got data', data);\n});\n\nserver2.on('a message came', function(m, data){\n  console.log('server 2 got data', data);\n});\n\nserver3.on('a message came', function(m, data){\n  console.log('server 3 got data', data);\n});\n\nserver4.on('a message came', function(m, data){\n  console.log('server 4 got data', data);\n});\n\n// a client that can be used to emit to all the servers\nvar client = messenger.createSpeaker(8001, 8002, 8003, 8004);\n\nsetInterval(function(){\n  client.shout('a message came', {some: data});\n}, 1000);\n```\n\nOutput\n\n```javascript\n> server 1 got some data\n> server 2 got some data\n> server 3 got some data\n> server 4 got some data\n> ... repeat ....\n```\n\nMulti-Server Request Reply - .request\n-------------\nMessenger uses round robin to pick a server to send data to.\n\nExample\n\n```javascript\nvar messenger = require('messenger');\n\n// here we have 4 servers listening on 4 different ports\nvar server1 = messenger.createListener(8001);\nvar server2 = messenger.createListener(8002);\nvar server3 = messenger.createListener(8003);\nvar server4 = messenger.createListener('127.0.0.1:8004');\n\nserver1.on('a message came', function(m, data){\n  m.reply({greetings:'server 1 got some data'});\n});\n\nserver2.on('a message came', function(){\n  m.reply({greetings:'server 2 got some data'});\n});\n\nserver3.on('a message came', function(){\n  m.reply({greetings:'server 3 got some data'});\n});\n\nserver4.on('a message came', function(){\n  m.reply({greetings:'server 4 got some data'});\n});\n\n// a client that can be used to emit to all the servers\nvar client = messenger.createSpeaker(8001, 8002, 8003, 8004);\n\nsetTimeout(function(){\n  // request here instead of shout to only access 1 server\n  client.request('a message came', {some: 'data'}, function(data){\n    console.log(data.greetings);\n  });\n}, 2000);\n```\n\nOutput\n\n```javascript\n> server 1 got some data\n```    \n\nFire and Forget with Multiple Servers - .send\n-------------\nAgain, using round robin to pick a server to send data to.\n\nExample\n\n```javascript\nvar messenger = require('messenger');\n\n// here we have 4 servers listening on 4 different ports\nvar server1 = messenger.createListener(8001);\nvar server2 = messenger.createListener(8002);\nvar server3 = messenger.createListener(8003);\nvar server4 = messenger.createListener('127.0.0.1:8004');\n\nserver1.on('a message came', function(m, data){\n  console.log(data);\n});\n\nserver2.on('a message came', function(){\n  console.log(data);\n});\n\nserver3.on('a message came', function(){\n  console.log(data);\n});\n\nserver4.on('a message came', function(){\n  console.log(data);\n});\n\n// a client that can be used to emit to all the servers\nvar client = messenger.createSpeaker(8001, 8002, 8003, 8004);\n\nsetTimeout(function(){\n  // use send instead of reply\n  client.send('a message came', {some: 'data'});\n}, 2000);\n```\n\nOutput\n\n```javascript\n// via one of the 4 servers\n> {'some': 'data'} \n```\n \nPlugin (Middleware) Example\n-------------\nTake a look at the function authRequired.  \nYou may augment the value of data by changing m.data (see Example).\n\nExample\n\n```javascript\nvar messenger = require('messenger');\n\nvar server = messenger.createListener(8000);\nvar client = messenger.createSpeaker(8000);\n\nfunction authRequired(m, data) {\n  if (data.authorized) {\n    m.data.coolness = 10; // modify m.data if you want it passed, not data\n    m.next(); // continuation passing\n    return;\n  }\n  m.reply({error:'not authorized'});\n}\n\nserver.on('protected request', authRequired, function(m, data){\n  m.reply({you:'got past security with a coolness factor of ' + data.coolness})\n});\n\nvar auth = false;\nsetInterval(function(){\n  \n  client.request('protected request', {authorized:auth}, function(data){\n    console.log(data);\n  })\n  \n  if (auth === false) {\n    auth = true;\n  } else {\n    auth = false;\n  }\n}, 2000);\n```\n\nOutput\n\n```javascript    \n> {error: 'not authorized'}\n> {you:'got past security'}\n> {error: 'not authorized'}\n> {you:'got past security'}\n> ... etc ...\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/weixiyen/messenger.js/issues"
  },
  "_id": "messenger@0.0.9",
  "_from": "messenger@"
}
